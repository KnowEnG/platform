"""This module defines a class that creates JWT tokens for users."""
from datetime import datetime
import jwt
from jwt import InvalidAudienceError, InvalidIssuerError, ExpiredSignatureError
from nest_py.core.data_types.nest_user import NestUser
from nest_py.core.data_types.nest_id import NestId

class TokenAgent(object):
    """Class that creates JWT tokens for users."""

    def __init__(self, jwt_secret, jwt_issuer, jwt_audiences, default_lifespan=None):
        """Initializes self.

        Args:
            jwt_secret (str): The symmetric secret for signing tokens.
            jwt_issuer (str): The issuer string to use ("who issued this
                token?").
            jwt_audiences (List[str]): The audiences list to use ("who should
                accept this token?").
            default_lifespan(datetime.timedelta): if no lifespan is passed 
                to the create* methods, this will be used.

        Returns:
            None: None.
        """
        self.jwt_secret = jwt_secret
        self.jwt_issuer = jwt_issuer
        self.jwt_audiences = jwt_audiences
        self.default_lifespan = default_lifespan
        return

    def create_for_user(self, user, lifespan=None):
        """Creates a token for a user.

        Args:
            user (nest_py.flask.accounts.user.NestUser): The user.
            lifespan (datetime.timedelta): How long the token should be valid. Or
                None to use the default_lifespan
        """
        if lifespan is None:
            lifespan = self.default_lifespan
        print('TokenAgent.create_for_user: ' + str(user.to_jdata()))
        token_payload = create_user_payload_now(user, self.jwt_issuer, self.jwt_audiences, lifespan)
        print('TokenAgent created payload: ' + str(token_payload.data))
        token = token_payload.to_jwt_token(self.jwt_secret)
        print('TokenAgent created token: ' + str(token))
        return token

    def create_for_system_operation_as_user(self, nest_id, lifespan=None, \
        given_name='Nest', family_name='System', thumb_url='',
        username='nestsysteminternal'):
        """Creates a token for a system operation performed on a user's behalf.

        Args:
            nest_id(NestId): The user's id.
            lifespan (Optional(datetime.timedelta)): How long the token should be valid.
            given_name (Optional[str]): A given name to use on the token.
            family_name (Optional[str]): A family name to use on the token.
            thumb_url (Optional[str]): A thumbnail URL to use on the token.
            username (Optional[str]): A username to use on the token.
        """
        nest_user = NestUser(nest_id, username, given_name, family_name, thumb_url=thumb_url)
        token = self.create_for_user(nest_user, lifespan=lifespan)
        return token

    def decode(self, token):
        """
        token(str): A jwt token, generated by a compatible TokenAgent
        returns a TokenPayload. Returns None if the token could not
        be decoded. Will return a TokenPayload if it is expired.
        """
        audience = self.jwt_audiences[0]
        tkn_payload = decode_token(token, self.jwt_secret, audience, self.jwt_issuer)
        return tkn_payload

class TokenPayload(object):

    def __init__(self, payload_data):
        self.data = payload_data
        return

    def to_nest_user(self):
        user = NestUser(
            NestId(self.data['sub']),
            self.data['upn'],
            self.data['given_name'],
            self.data['family_name'],
            thumb_url=self.data['thumb_url'])
        return user

    def is_expired(self):
        expired = datetime.now() > self.data['exp']
        return expired

    def to_jwt_token(self, jwt_secret):
        tkn = jwt.encode(self.data, jwt_secret)
        return tkn

def create_payload_now(nest_id, username, given_name, family_name, 
        thumb_url, jwt_issuer, jwt_audiences, lifespan):
    """
    creates a TokenPayload that is issued 'now' and expires at
    now+lifespan

        nest_id(NestId): The user's id.
        username (str): The user's username.
        given_name (str): The user's given name.
        family_name (str): The user's family name.
        thumb_url (str): The user's thumbnail image URL.
        jwt_issuer (str): The issuer string to use ("who issued this
            token?").
        jwt_audiences (List[str]): The audiences list to use ("who should
            accept this token?").
        lifespan (datetime.timedelta): How long the token should be valid.
    """
    data = {'iss': jwt_issuer,
            'aud': jwt_audiences,
            'iat': datetime.now(),
            'exp': datetime.now() + lifespan,
            'given_name': given_name,
            'family_name': family_name,
            'thumb_url': thumb_url,
            'sub': nest_id.get_value(),
            'upn': username}
    tp = TokenPayload(data)
    return tp

def create_user_payload_now(nest_user, jwt_issuer, jwt_audiences, lifespan):
    tp = create_payload_now(
        nest_user.get_nest_id(),
        nest_user.get_username(),
        nest_user.get_given_name(),
        nest_user.get_family_name(),
        nest_user.get_thumb_url(),
        jwt_issuer,
        jwt_audiences,
        lifespan)
    return tp

def decode_token(tkn, jwt_secret, audience, issuer):
    """
    jwt_secret (string) this app's JWT_SECRET
    audience (string) must be in the token's 'audiences' or
        will raise an InvalidAudienceError
    returns a TokenPayload. Note that the time fields will be translated
        back to datetime objects
        If the token is invalid given our audience and issuer, will return
        None, indicating an undecodable token.
        If the token is merely expired, it will still return the TokenPayload,
        but it's is_expired() method will return True.
    """
    try:
        data = jwt.decode(tkn, jwt_secret, audience=audience, issuer=issuer)
    except InvalidAudienceError:
        print("Invalid audience for token being decoded: " + str(audience))
        data = None
    except InvalidIssuerError:
        print("Invalid issuer for token being decoded: " + str(audience))
        data = None
    except ExpiredSignatureError:
        print("Decoded expired token")
        data = jwt.decode(tkn, jwt_secret, audience=audience, issuer=issuer, verify=False)

    if data is None:
        print("No data from decoded token")
        tp = None
    else:
        data['exp'] = datetime.fromtimestamp(data['exp'])
        data['iat'] = datetime.fromtimestamp(data['iat'])
        tp = TokenPayload(data)
    #print(str(data))
    return tp


