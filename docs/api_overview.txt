
This document describes the standard endpoints that Nest provides for CRUD
operations on datatypes defined by Nest-style schemas.

Some vocabulary:

  schema: datatype definition, normally a
	  "nest_py.core.data_types.TablelikeSchema" object with attributes defined.
	  The schema defines what fields are in objects that are uploaded/downloaded to
	  an endpoint in the API and the columns in the underlying Postgres table.

  entry: An instance of the datatype. In the API, a single JSON object. In the
  	database, one row in a table.  See nest_py.core.data_types.TablelikeEntry

  collection: Generic term for a group of entries of a particular schema. A
	  database table is the concrete collection, and the API is a wrapper around
	  that table that behaves as a collection.

  attributes: Attributes are added to a schema to define it. Their definition
	  isn't really exposed through the API, but you will need to know the
	  attributes to be able to POST valid data as an entry into a collection. 

	The types of attributes with their specific type in the different systems:

        Attribute       Postgres        JSON            Python

        Numeric         Numeric         Number          float
        Categoric       Text            String          string
        Boolean         Boolean         Boolean         bool
        JSON            Text            More JSON       "jdata"
        ForeignId       Integer         Number          NestId
        NumericList     ARRAY(Numeric)  List(Numbers)   list of floats
        CategoricList   ARRAY(Text)     List(Strings)   list of strings
        ForeignIdList   ARRAY(Integer)  List(Numbers)   list of NestIds

	...where 'jdata' is nested dict/lists/primitives that can be serialized to
	JSON directly

	"_id"/'id'/NestId: All entries are assigned and id by the database. Every
		collection's table has an 'id' column of integers, and the integer
		is generated by a key "sequence" in Postgres. In API responses this
		attribute is an int called '_id'. Within the python codebase, this
		is a NestId object that contains the integer. 

	ForeignId: The term is only explicitly used by TablelikeSchemas internally, but there
		is a basic pattern of calling integer fields that are actually a 
		reference to a row in a different collection as an attribute called
		'other_collection_id'. 

	nest_users: A builtin collection that contains users that can log into the API. 
		Contains username, hashed password, and whether the user is a superuser
		that can read all data (along with some other descriptive attributes).

	"owner_id":  An 'id' of an entry in the nest_users collection that is assigned
		to all entries (in every collection) which indicates who wrote that entry
		to the database. Like the 'id' attribute, it is added automatically
		to all schemas. By default, when a user queries a collection for data,
		they are only returned those entries with an 'owner_id' equal to their
		own 'id' in nest_users. The exceptions are if the SecurityPolicy
		for that collection is customized or if the requesting user is a superuser.

Endpoints:

	Every collection has two supporting endpoints in the api:
		1) Collection Endpoint:  /api/v2/<schema_name>  
			supports POST to create a new entry and GET to retrieve a list of
			entries that match a filter. See
			nest_py.core.flask.nest_endpoints.crud_endpoints.NestCollectionEndpoint
			
 		2) Entry Endpoint: /api/v2/<schema_name>/<_id>
			for an individual entry with id '_id'. Note that all entries have an
				_id field with a primary key generated by the
				corresponding postgres table. This endpoint provides GET to
				fetch the object, PATCH to update one or more fields, and
				DELETE.  See
				nest_py.core.flask.nest_endpoints.crud_endpoints.NestEntry


Endpoint Usage:

	Collection Endpoint /api/v2/<schema_name>
		
		POST: POST either a single JSON object corresponding to the schema, or
			a list of such objects 
			/api/v2/<schema_name>?reply=<reply>
		Params:
			reply = one of [whole, id, count]
				whole: the uploaded data is written as an entry to the DB
					and the complete object(s) are included in the response,
					the same as if you did a GET to retrieve those same objects
					next. Useful if a custom endpoint adds fields to what is
					uploaded (like creation timestamp)
				id: only returns the id created by the db, with format:
					{'created_id':<_id>} or, for a list: 
					{'created_ids':[<id1>, <id2>...]}.  this is the default.
				count: only returns the number of succesfully created
					objects: {'num_created':<count>}. Note that this option
					allows for a very fast bulk upload where the data is pushed
					into the database asynchronously and should be used for
					uploads of many entries if possible.

		GET: Performs a simple filtering query on the entries in the collection.
			/api/v2/<schema_name>?field1=xxx&field2=yyy&field3=a,b,c
			
			Params:
				fieldx=xxx
					The response will only return entries whose attribute
					'fieldx' has value 'xxx'
				fieldy=y1,y2,y3
					The response will return entries whose 'fieldy' is either
					y1 OR y2 OR y3	
				sort=fieldx,fieldy
					The return order of the entries will be sorting by fieldx,
					then fieldy
				max_results=<count>
				page=<page_num>
					Pagination controls. 'max_results' is how many items
					(at most) to return with this response. 'page' is which
					set of items to return in this page, with the first page
					being zero. Therefore the response will have entries 
					from (page_num*count) to ((page_num+1)* count -1). 
					The ordering is determined by the sort fields, or just
					the '_id' field if no sort fields are specified.
			    fields=field3,field4
					When the entries are returned, only the requested fields
					will be included. If unspecified, all fields are returned.
			
			Response: 
				{
					"_items" : [<requested entries>],
					"_meta" : {
							"page":<page_num>
							"total_available_items":<total entries to return>,
							"num_items": <number of items in "_items">,
							"last_page": <the last page index, if you keep num_items constant>
					}
				}


		DELETE: Deletes all entries in the underlying table.


	Entry Endpoint /api/v2/<schema_name>/<_id>

		GET: Returns the entire entry. No params are supported. If you want to
			control the fields that are returned in the response, use the
			collection query form like:
			"/api/v2/<schema_name>?_id=<_id>&fields=fieldx,fieldy"

		PATCH: Must include an '_id', but all other fields are optional in the
			json data in the request body. Updates those fields in the database for
			the entry with id <_id>
			Params:
				reply=[whole, id, count]
					see 'POST' above for details, but it basically says if you
					want the whole entry returned in the response

		DELETE: Deletes the entry. Response will look like: {'num_deleted':1}

  	
